#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="STORE")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBOOK(BOOK instance);
    partial void UpdateBOOK(BOOK instance);
    partial void DeleteBOOK(BOOK instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertINVOICE(INVOICE instance);
    partial void UpdateINVOICE(INVOICE instance);
    partial void DeleteINVOICE(INVOICE instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Db.Properties.Settings.Default.STOREConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BOOK> BOOKs
		{
			get
			{
				return this.GetTable<BOOK>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<INVOICE> INVOICEs
		{
			get
			{
				return this.GetTable<INVOICE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BOOK")]
	public partial class BOOK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Book_ID;
		
		private string _Book_Name;
		
		private string _Book_AuthorName;
		
		private decimal _Book_Price;
		
		private int _Book_Qty;
		
		private EntitySet<INVOICE> _INVOICEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBook_IDChanging(string value);
    partial void OnBook_IDChanged();
    partial void OnBook_NameChanging(string value);
    partial void OnBook_NameChanged();
    partial void OnBook_AuthorNameChanging(string value);
    partial void OnBook_AuthorNameChanged();
    partial void OnBook_PriceChanging(decimal value);
    partial void OnBook_PriceChanged();
    partial void OnBook_QtyChanging(int value);
    partial void OnBook_QtyChanged();
    #endregion
		
		public BOOK()
		{
			this._INVOICEs = new EntitySet<INVOICE>(new Action<INVOICE>(this.attach_INVOICEs), new Action<INVOICE>(this.detach_INVOICEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="Char(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Book_Name
		{
			get
			{
				return this._Book_Name;
			}
			set
			{
				if ((this._Book_Name != value))
				{
					this.OnBook_NameChanging(value);
					this.SendPropertyChanging();
					this._Book_Name = value;
					this.SendPropertyChanged("Book_Name");
					this.OnBook_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_AuthorName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Book_AuthorName
		{
			get
			{
				return this._Book_AuthorName;
			}
			set
			{
				if ((this._Book_AuthorName != value))
				{
					this.OnBook_AuthorNameChanging(value);
					this.SendPropertyChanging();
					this._Book_AuthorName = value;
					this.SendPropertyChanged("Book_AuthorName");
					this.OnBook_AuthorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Price", DbType="Decimal(4,2) NOT NULL")]
		public decimal Book_Price
		{
			get
			{
				return this._Book_Price;
			}
			set
			{
				if ((this._Book_Price != value))
				{
					this.OnBook_PriceChanging(value);
					this.SendPropertyChanging();
					this._Book_Price = value;
					this.SendPropertyChanged("Book_Price");
					this.OnBook_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Qty", DbType="Int NOT NULL")]
		public int Book_Qty
		{
			get
			{
				return this._Book_Qty;
			}
			set
			{
				if ((this._Book_Qty != value))
				{
					this.OnBook_QtyChanging(value);
					this.SendPropertyChanging();
					this._Book_Qty = value;
					this.SendPropertyChanged("Book_Qty");
					this.OnBook_QtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOK_INVOICE", Storage="_INVOICEs", ThisKey="Book_ID", OtherKey="Book_ID")]
		public EntitySet<INVOICE> INVOICEs
		{
			get
			{
				return this._INVOICEs;
			}
			set
			{
				this._INVOICEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INVOICEs(INVOICE entity)
		{
			this.SendPropertyChanging();
			entity.BOOK = this;
		}
		
		private void detach_INVOICEs(INVOICE entity)
		{
			this.SendPropertyChanging();
			entity.BOOK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cust_ID;
		
		private string _Cust_Fname;
		
		private string _Cust_Lname;
		
		private decimal _Cust_Balance;
		
		private string _Cust_User;
		
		private string _Cust_Password;
		
		private EntitySet<INVOICE> _INVOICEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCust_IDChanging(int value);
    partial void OnCust_IDChanged();
    partial void OnCust_FnameChanging(string value);
    partial void OnCust_FnameChanged();
    partial void OnCust_LnameChanging(string value);
    partial void OnCust_LnameChanged();
    partial void OnCust_BalanceChanging(decimal value);
    partial void OnCust_BalanceChanged();
    partial void OnCust_UserChanging(string value);
    partial void OnCust_UserChanged();
    partial void OnCust_PasswordChanging(string value);
    partial void OnCust_PasswordChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._INVOICEs = new EntitySet<INVOICE>(new Action<INVOICE>(this.attach_INVOICEs), new Action<INVOICE>(this.detach_INVOICEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cust_ID
		{
			get
			{
				return this._Cust_ID;
			}
			set
			{
				if ((this._Cust_ID != value))
				{
					this.OnCust_IDChanging(value);
					this.SendPropertyChanging();
					this._Cust_ID = value;
					this.SendPropertyChanged("Cust_ID");
					this.OnCust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Fname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cust_Fname
		{
			get
			{
				return this._Cust_Fname;
			}
			set
			{
				if ((this._Cust_Fname != value))
				{
					this.OnCust_FnameChanging(value);
					this.SendPropertyChanging();
					this._Cust_Fname = value;
					this.SendPropertyChanged("Cust_Fname");
					this.OnCust_FnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Lname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cust_Lname
		{
			get
			{
				return this._Cust_Lname;
			}
			set
			{
				if ((this._Cust_Lname != value))
				{
					this.OnCust_LnameChanging(value);
					this.SendPropertyChanging();
					this._Cust_Lname = value;
					this.SendPropertyChanged("Cust_Lname");
					this.OnCust_LnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Balance", DbType="Decimal(9,2) NOT NULL")]
		public decimal Cust_Balance
		{
			get
			{
				return this._Cust_Balance;
			}
			set
			{
				if ((this._Cust_Balance != value))
				{
					this.OnCust_BalanceChanging(value);
					this.SendPropertyChanging();
					this._Cust_Balance = value;
					this.SendPropertyChanged("Cust_Balance");
					this.OnCust_BalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_User", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cust_User
		{
			get
			{
				return this._Cust_User;
			}
			set
			{
				if ((this._Cust_User != value))
				{
					this.OnCust_UserChanging(value);
					this.SendPropertyChanging();
					this._Cust_User = value;
					this.SendPropertyChanged("Cust_User");
					this.OnCust_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Password", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Cust_Password
		{
			get
			{
				return this._Cust_Password;
			}
			set
			{
				if ((this._Cust_Password != value))
				{
					this.OnCust_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Cust_Password = value;
					this.SendPropertyChanged("Cust_Password");
					this.OnCust_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_INVOICE", Storage="_INVOICEs", ThisKey="Cust_ID", OtherKey="Cust_ID")]
		public EntitySet<INVOICE> INVOICEs
		{
			get
			{
				return this._INVOICEs;
			}
			set
			{
				this._INVOICEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INVOICEs(INVOICE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_INVOICEs(INVOICE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.INVOICE")]
	public partial class INVOICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Inv_Num;
		
		private string _Book_ID;
		
		private int _Inv_Qty;
		
		private int _Cust_ID;
		
		private decimal _Inv_Total;
		
		private System.DateTime _Inv_Date;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<BOOK> _BOOK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInv_NumChanging(int value);
    partial void OnInv_NumChanged();
    partial void OnBook_IDChanging(string value);
    partial void OnBook_IDChanged();
    partial void OnInv_QtyChanging(int value);
    partial void OnInv_QtyChanged();
    partial void OnCust_IDChanging(int value);
    partial void OnCust_IDChanged();
    partial void OnInv_TotalChanging(decimal value);
    partial void OnInv_TotalChanged();
    partial void OnInv_DateChanging(System.DateTime value);
    partial void OnInv_DateChanged();
    #endregion
		
		public INVOICE()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._BOOK = default(EntityRef<BOOK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inv_Num", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Inv_Num
		{
			get
			{
				return this._Inv_Num;
			}
			set
			{
				if ((this._Inv_Num != value))
				{
					this.OnInv_NumChanging(value);
					this.SendPropertyChanging();
					this._Inv_Num = value;
					this.SendPropertyChanged("Inv_Num");
					this.OnInv_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					if (this._BOOK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inv_Qty", DbType="Int NOT NULL")]
		public int Inv_Qty
		{
			get
			{
				return this._Inv_Qty;
			}
			set
			{
				if ((this._Inv_Qty != value))
				{
					this.OnInv_QtyChanging(value);
					this.SendPropertyChanging();
					this._Inv_Qty = value;
					this.SendPropertyChanged("Inv_Qty");
					this.OnInv_QtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_ID", DbType="Int NOT NULL")]
		public int Cust_ID
		{
			get
			{
				return this._Cust_ID;
			}
			set
			{
				if ((this._Cust_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCust_IDChanging(value);
					this.SendPropertyChanging();
					this._Cust_ID = value;
					this.SendPropertyChanged("Cust_ID");
					this.OnCust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inv_Total", DbType="Decimal(9,2) NOT NULL")]
		public decimal Inv_Total
		{
			get
			{
				return this._Inv_Total;
			}
			set
			{
				if ((this._Inv_Total != value))
				{
					this.OnInv_TotalChanging(value);
					this.SendPropertyChanging();
					this._Inv_Total = value;
					this.SendPropertyChanged("Inv_Total");
					this.OnInv_TotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inv_Date", DbType="Date NOT NULL")]
		public System.DateTime Inv_Date
		{
			get
			{
				return this._Inv_Date;
			}
			set
			{
				if ((this._Inv_Date != value))
				{
					this.OnInv_DateChanging(value);
					this.SendPropertyChanging();
					this._Inv_Date = value;
					this.SendPropertyChanged("Inv_Date");
					this.OnInv_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_INVOICE", Storage="_CUSTOMER", ThisKey="Cust_ID", OtherKey="Cust_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.INVOICEs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.INVOICEs.Add(this);
						this._Cust_ID = value.Cust_ID;
					}
					else
					{
						this._Cust_ID = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOK_INVOICE", Storage="_BOOK", ThisKey="Book_ID", OtherKey="Book_ID", IsForeignKey=true)]
		public BOOK BOOK
		{
			get
			{
				return this._BOOK.Entity;
			}
			set
			{
				BOOK previousValue = this._BOOK.Entity;
				if (((previousValue != value) 
							|| (this._BOOK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BOOK.Entity = null;
						previousValue.INVOICEs.Remove(this);
					}
					this._BOOK.Entity = value;
					if ((value != null))
					{
						value.INVOICEs.Add(this);
						this._Book_ID = value.Book_ID;
					}
					else
					{
						this._Book_ID = default(string);
					}
					this.SendPropertyChanged("BOOK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
